{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This project aims to provide a better developer experience while developing <code>wsadmin</code> scripts for IBM\u00ae Websphere Application Server.</p> <p>It does so by providing:</p> <ul> <li>Autocompletion through the intellisense.</li> <li>Type hints (function parameters and function return types)</li> </ul> <p>This leads to lots of advantages to the developer, such as:</p> <ul> <li>Faster development, since you don't need to leave the editor to know what was the name of some method.</li> <li>Less errors, since you don't need to manually re-type the method names and an error will show up if you mistype the methods.</li> </ul> <p>Warning</p> <p>The <code>wsadmin</code> scripting tool only supports Jython up to 2.7 (some still have Jython 2.1!), so the following requirements must still be satisfied:</p> <ul> <li>you MUST use Python 2 syntax (check the Jython version to know which one you'll need to target)</li> <li>some packages available on development environments might not be available or might have some differences.</li> </ul> <p>Make sure to check that your script matches your workplace/environment requirements before submitting it. This package DOES NOT in any way prevent you from writing bugged code, or could even contain old modules not used anymore in the official documentation (since it was originally written for my workplace production environment using Websphere Application Server 8.5.5/9.0 and Jython 2.1).</p> <p>Always check that your environment requirements/versions are the same as this library. </p>"},{"location":"#gallery","title":"Gallery","text":"<p>Here's some screenshots showing the features of this package. The IDE I'm using here is Visual Studio Code.</p> <p> </p> Autocompletion for the <code>AdminControl</code> command. <p> </p> Type hint for function parameters as well as return types. <p> </p> An error will show up if you mistype the method. <p> </p> Autocompletion based on the <code>AdminConfig.attributes(...)</code> return type (<code>str</code>)."},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This is an unofficial package created for speeding up the development process and is not in any way affiliated with IBM\u00ae. All trademarks and registered trademarks are the property of their respective company owners.</p> <p>The code does not include any implementation detail, and includes only the informations (such as parameter numbers, types and descriptions) publicly available on the official Websphere Application Server\u00ae documentation.</p>"},{"location":"getting-started/","title":"Getting started","text":"<p>This section will guide you through the installation and setup of the development environment.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>The first step is to install the <code>wsadmin-type-hints</code> package.</p> <ul> <li> <p>Using <code>pip</code> (global install): <pre><code>pip install wsadmin-type-hints\n</code></pre></p> </li> <li> <p>Using <code>poetry</code>: <pre><code>poetry add wsadmin-type-hints --group dev \n</code></pre></p> </li> <li> <p>Using <code>pipenv</code>: <pre><code>pipenv install --dev wsadmin-type-hints\n</code></pre></p> </li> <li> <p>For other dependency managers (such as pdm or hatch) see the respective documentation...</p> </li> </ul> <p>Note</p> <p>If installed inside a virtual environment, you may need to activate it first, to be able to use it.</p>"},{"location":"getting-started/#usage","title":"Usage","text":"<p>The <code>wsadmin-type-hints</code> package is intended to be used to provide type hints to the Python interpreter used by IDE language servers (such as Pylance).  Because of this, the functions do not contain actual code and their body is always empty.</p> <p>The following steps will allow you to make use of modern IDE intellisense for <code>wsadmin</code> objects:</p> <ol> <li> <p>To differentiate between the development and production environment we can use a <code>try..except</code> block: <pre><code>try:\n(AdminControl, AdminConfig, AdminApp, AdminTask, Help)\nexcept NameError:\n# wsadmin objects are not defined, so this is the development environment.\nfrom wsadmin_type_hints import *\nelse:\nprint(\"Production environment, i'm not needed here \ud83d\ude03\")\n</code></pre>     This block could even be left as-is in the code deployed on the production server (maybe leaving out the emoji before uploading \ud83d\ude07), since it won't ever reach the import (and even then the script would simply fail because of the <code>wsadmin-type-hints</code> package not being there).</p> </li> <li> <p>Use the <code>wsadmin</code> objects like always:  <pre><code>current_cell = AdminControl.getCell()\nprint(\"Current cell: %s\" % current_cell)\n</code></pre></p> </li> </ol>"},{"location":"resources/","title":"Useful resources","text":""},{"location":"resources/#official-ibm-documentation","title":"Official IBM documentation","text":"<ul> <li>Online <code>wsadmin</code> documentation</li> <li>(PDF) Jython scripting with <code>wsadmin</code> tutorial</li> <li>(PDF) Scripting various types of applications - Very big file (&gt; 700 pages) with lots of info on how to automate a large range of operations by making use of the <code>wsadmin</code>.</li> </ul>"},{"location":"resources/#python-documentation","title":"Python documentation","text":"<ul> <li>Python 2.1</li> <li>Python 2.7</li> </ul>"},{"location":"resources/#collection-of-scripts","title":"Collection of scripts","text":"<ul> <li><code>wsadmin-tools</code> by @sgurjar - Collection of useful functions meant to ease server administration through <code>wsadmin</code>.</li> <li><code>wsadminlib</code> by @wsadminlib - A library which simplifies configuration of IBM WebSphere AppServer using python scripting.</li> </ul>"},{"location":"resources/#other","title":"Other","text":"<ul> <li>Stackoverflow - Doesn't need any explanation \ud83d\ude36</li> <li>FreeKB \"IBM Websphere\" articles - Collection of articles about the administration of an \"IBM WebSphere Application Server\" infrastructure (not only with <code>wsadmin</code>)</li> <li>WsAdmin Objects - Simple explanation of the difference between the 4 main objects used by the <code>wsadmin</code></li> <li>SetGetWeb WAS - Something is ripped from the IBM documentation, something else is useful; worth of a glance anyway.</li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>wsadmin_type_hints<ul> <li>AdminApp</li> <li>AdminConfig</li> <li>AdminControl</li> <li>AdminTask</li> <li>Help</li> <li>wsadmin_types</li> </ul> </li> </ul>"},{"location":"reference/wsadmin_type_hints/","title":"wsadmin_type_hints","text":"<p>Include <code>wsadmin.sh</code> Jython language objects: - <code>AdminControl</code> - <code>AdminConfig</code> - <code>AdminApp</code> - <code>AdminTask</code> - <code>Help</code></p> <p>Use it like this: <pre><code>try:\n(AdminControl, AdminConfig, AdminApp, AdminTask, Help)\nexcept NameError:\nfrom wsadmin_language import *\nelse:\nprint(\"AdminControl is already defined, no shim needed\")\n</code></pre></p>"},{"location":"reference/wsadmin_type_hints/AdminApp/","title":"AdminApp","text":"<p>Use the <code>AdminApp</code> object to install, modify, and administer applications.</p> <p>The <code>AdminApp</code> object interacts with the WebSphere\u00ae Application Server management  and configuration services to make application inquiries and changes.  This interaction includes installing and uninstalling applications, listing modules,  exporting, and so on.</p> <p>For more info go to https://www.ibm.com/docs/en/was-nd/8.5.5?topic=scripting-commands-adminapp-object-using-wsadmin</p>"},{"location":"reference/wsadmin_type_hints/AdminConfig/","title":"AdminConfig","text":"<p>Use the <code>AdminConfig</code> object to invoke configuration commands and to create or  change elements of the WebSphere\u00ae Application Server configuration, for example,  creating a data source.</p> <p>For more info go to https://www.ibm.com/docs/en/was-nd/8.5.5?topic=scripting-commands-adminconfig-object-using-wsadmin</p>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.attributes","title":"<code>attributes(object_type)</code>","text":"<p>Get a multiline string containing the top level attributes for the given type.</p> <p>Parameters:</p> Name Type Description Default <code>object_type</code> <code>str</code> <p>name of the object type. Use <code>AdminConfig.types()</code> to get a list of available types.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Multiline string with the top level attributes for the given type.</p> Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def attributes(object_type: str) -&gt; str:\n\"\"\"Get a multiline string containing the top level attributes for the given type.\n\tArgs:\n\t\tobject_type (str): name of the object type. Use `AdminConfig.types()` to get a list of available types.\n\tReturns:\n\t\tstr: Multiline string with the top level attributes for the given type.\n\t\"\"\"\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.checkin","title":"<code>checkin(document_uri, file_name, opaque_object)</code>","text":"<p>Checks a file that the document URI describes into the configuration repository. This method only applies to deployment manager configurations.</p> <p>Parameters:</p> Name Type Description Default <code>document_uri</code> <code>str</code> <p>The document URI, relative to the root of the configuration repository.</p> required <code>file_name</code> <code>str</code> <p>The name of the source file to check.</p> required <code>opaque_object</code> <code>_OpaqueDigestObject</code> <p>The object returned by a prior call to the <code>AdminConfig.extract()</code> command.</p> required Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def checkin(document_uri: str, file_name: str, opaque_object: _OpaqueDigestObject) -&gt; Any:\n\"\"\"Checks a file that the document URI describes into the configuration repository.\n\tThis method only applies to deployment manager configurations.\n\tArgs:\n\t\tdocument_uri (str): The document URI, relative to the root of the configuration repository.\n\t\tfile_name (str): The name of the source file to check.\n\t\topaque_object (_OpaqueDigestObject): The object returned by a prior call to the `AdminConfig.extract()` command.\n\t\"\"\"\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.extract","title":"<code>extract(document_uri, filename)</code>","text":"<p>Extracts a configuration repository file that is described by the document URI and places it in the file named by filename.  This method only applies to deployment manager configurations.</p> <p>Parameters:</p> Name Type Description Default <code>document_uri</code> <code>str</code> <p>The document URI, relative to the root of the configuration repository. This MUST exist in the repository.</p> required <code>filename</code> <code>str</code> <p>The name of the source file to check. If it exists already, it will be overwritten.</p> required <p>Returns:</p> Name Type Description <code>_OpaqueDigestObject</code> <code>_OpaqueDigestObject</code> <p>An opaque \"digest\" object which should be used to check the file back in using the checkin command.</p> Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def extract(document_uri: str, filename: str) -&gt; _OpaqueDigestObject:\n\"\"\"Extracts a configuration repository file that is described by the document URI and places it in the file named by filename. \n\tThis method only applies to deployment manager configurations.\n\tArgs:\n\t\tdocument_uri (str): The document URI, relative to the root of the configuration repository. This MUST exist in the repository.\n\t\tfilename (str): The name of the source file to check. If it exists already, it will be overwritten.\n\tReturns:\n\t\t_OpaqueDigestObject: An opaque \"digest\" object which should be used to check the file back in using the checkin command.\n\t\"\"\"\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/","title":"AdminControl","text":"<p>Use the AdminControl object to invoke operational commands that manage objects for the application server.</p> <p>Many of the AdminControl commands have multiple signatures so that they can either invoke in a raw mode using  parameters that are specified by Java Management Extensions (JMX), or by using strings for parameters.  In addition to operational commands, the AdminControl object supports some utility commands for tracing,  reconnecting with a server, and converting data types.</p> <p>For more info go to https://www.ibm.com/docs/en/was-nd/8.5.5?topic=scripting-commands-admincontrol-object-using-wsadmin</p>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.completeObjectName","title":"<code>completeObjectName(object_name, template='')</code>","text":"<p>Use the <code>completeObjectName</code> command to create a string representation of a complete <code>ObjectName</code> value  that is based on a fragment. </p> <p>This command does not communicate with the server to find a matching <code>ObjectName</code> value. </p> <p>If the system finds several MBeans that match the fragment, the command returns the first one. </p> <p>Parameters:</p> Name Type Description Default <code>object_name</code> <code>ObjectName</code> <p>Specifies the name of the object to complete.</p> required <code>template</code> <code>str</code> <p>Specifies the name of the template to use. For example, the template might be <code>type=Server,*.</code>.</p> <code>''</code> <p>Example: <pre><code>server_on = AdminControl.completeObjectName('node=mynode,type=Server,*')\n</code></pre></p> Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def completeObjectName(object_name, template=\"\"):\n\"\"\" \n\tUse the `completeObjectName` command to create a string representation of a complete `ObjectName` value \n\tthat is based on a fragment. \n\tThis command does not communicate with the server to find a matching `ObjectName` value. \n\tIf the system finds several MBeans that match the fragment, the command returns the first one. \n\tArgs:\n\t\tobject_name (ObjectName): Specifies the name of the object to complete.\n\t\ttemplate (str): Specifies the name of the template to use. For example, the template might be `type=Server,*.`.\n\tExample:\n\t```\n\tserver_on = AdminControl.completeObjectName('node=mynode,type=Server,*')\n\t```\n\t\"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.getAttribute","title":"<code>getAttribute(object_name, attribute)</code>","text":"<p>Use the <code>getAttribute</code> command to return the value of the attribute for the name that you provide.</p> <p>If you use the <code>getAttribute</code> command to determine the state of an application, one of the following values is returned: - 0 - which indicates that the application is starting - 1 - which indicates that the application has started - 2 - which indicates that the application is stopping - 3 - which indicates that the application has stopped - 4 - which indicates that the application failed to start</p> <p>Parameters:</p> Name Type Description Default <code>object_name</code> <code>ObjectName</code> <p>Specifies the object name of the MBean of interest.</p> required <code>attribute</code> <code>str</code> <p>Specifies the name of the attribute to query.</p> required <p>Example: <pre><code>objNameString = AdminControl.completeObjectName('WebSphere:type=Server,*') \nprocess_type  = AdminControl.getAttribute(objNameString, 'processType')\n\nprint(process_type)\n</code></pre></p> Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def getAttribute(object_name, attribute):\n\"\"\"Use the `getAttribute` command to return the value of the attribute for the name that you provide.\n\tIf you use the `getAttribute` command to determine the state of an application, one of the following values is returned:\n\t- 0 - which indicates that the application is starting\n\t- 1 - which indicates that the application has started\n\t- 2 - which indicates that the application is stopping\n\t- 3 - which indicates that the application has stopped\n\t- 4 - which indicates that the application failed to start\n\tArgs:\n\t\tobject_name (ObjectName): Specifies the object name of the MBean of interest.\n\t\tattribute (str): Specifies the name of the attribute to query.\n\tExample:\n\t```\n\tobjNameString = AdminControl.completeObjectName('WebSphere:type=Server,*') \n\tprocess_type  = AdminControl.getAttribute(objNameString, 'processType')\n\tprint(process_type)\n\t```\n\t\"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.getAttribute_jmx","title":"<code>getAttribute_jmx(object_name, attribute)</code>","text":"<p>Use the <code>getAttribute_jmx</code> command to return the value of the attribute for the name that you provide.</p> <p>Parameters:</p> Name Type Description Default <code>object_name</code> <code>ObjectName</code> <p>Specifies the object name of the MBean of interest.</p> required <code>attribute</code> <code>str</code> <p>Specifies the name of the attribute to query.</p> required <p>Example: <pre><code>import javax.management as mgmt \n\nobjNameString = AdminControl.completeObjectName('WebSphere:=type=Server,*') \nobjName       = mgmt.ObjectName(objNameString)\nprocess_type  = AdminControl.getAttribute_jmx(objName, 'processType')\n\nprint(process_type)\n</code></pre></p> Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def getAttribute_jmx(object_name, attribute):\n\"\"\"Use the `getAttribute_jmx` command to return the value of the attribute for the name that you provide.\n\tArgs:\n\t\tobject_name (ObjectName): Specifies the object name of the MBean of interest.\n\t\tattribute (str): Specifies the name of the attribute to query.\n\tExample:\n\t```\n\timport javax.management as mgmt \n\tobjNameString = AdminControl.completeObjectName('WebSphere:=type=Server,*') \n\tobjName       = mgmt.ObjectName(objNameString)\n\tprocess_type  = AdminControl.getAttribute_jmx(objName, 'processType')\n\tprint(process_type)\n\t```\n\t\"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.getAttributes","title":"<code>getAttributes(object_name, attributes)</code>","text":"<p>Use the getAttributes command to return the attribute values for the names that you provide.</p> <p>Parameters:</p> Name Type Description Default <code>object_name</code> <code>ObjectName</code> <p>Use the getAttributes command to return the attribute values for the names that you provide.</p> required <code>attributes</code> <code>java.lang.String[] or java.lang.Object[]</code> <p>Specifies the names of the attributes to query.</p> required <p>Example: - Using Jython with string attributes:</p> <pre><code>objNameString = AdminControl.completeObjectname('WebSphere:type=Server,*)\nattributes    = AdminControl.getAttributes(objNameString, '[cellName nodeName]')\n\nprint(attributes)\n</code></pre> <ul> <li>Using Jython with object attributes:</li> </ul> <pre><code>objNameString = AdminControl.completeObjectname('WebSphere:type=Server,*)\nattributes    = AdminControl.getAttributes(objNameString, ['cellName', 'nodeName'])\n\nprint(attributes)\n</code></pre> Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def getAttributes(object_name, attributes):\n\"\"\"Use the getAttributes command to return the attribute values for the names that you provide.\n\tArgs:\n\t\tobject_name (ObjectName): Use the getAttributes command to return the attribute values for the names that you provide.\n\t\tattributes (java.lang.String[] or java.lang.Object[]): Specifies the names of the attributes to query.\n\tExample:\n\t- Using Jython with string attributes:\n\t```\n\tobjNameString = AdminControl.completeObjectname('WebSphere:type=Server,*)\n\tattributes    = AdminControl.getAttributes(objNameString, '[cellName nodeName]')\n\tprint(attributes)\n\t```\n\t- Using Jython with object attributes:\n\t```\n\tobjNameString = AdminControl.completeObjectname('WebSphere:type=Server,*)\n\tattributes    = AdminControl.getAttributes(objNameString, ['cellName', 'nodeName'])\n\tprint(attributes)\n\t```\n\t\"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.getPropertiesForDataSource","title":"<code>getPropertiesForDataSource()</code>","text":"<p>(Deprecated)</p> Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def getPropertiesForDataSource(): # undocumented\n\"\"\" (Deprecated) \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminTask/","title":"AdminTask","text":"<p>Use the <code>AdminTask</code> object to run administrative commands with the <code>wsadmin</code> tool.</p> <p>Administrative commands are loaded dynamically when you start the <code>wsadmin</code> tool.  The administrative commands that are available for you to use, and what you can do  with them, depends on the edition of the product that you use.</p> <p>For more info go to https://www.ibm.com/docs/en/was-nd/8.5.5?topic=scripting-commands-admintask-object-using-wsadmin</p>"},{"location":"reference/wsadmin_type_hints/Help/","title":"Help","text":"<p>You can use the Jython or Jacl scripting languages to find general help and dynamic online information about the currently running MBeans with the <code>wsadmin</code> tool. </p> <p>Use the Help object as an aid in writing and running scripts with the <code>AdminControl</code> object.</p> <p>For more info go to https://www.ibm.com/docs/en/was-nd/8.5.5?topic=scripting-commands-help-object-using-wsadmin</p>"},{"location":"reference/wsadmin_type_hints/wsadmin_types/","title":"wsadmin_types","text":""}]}