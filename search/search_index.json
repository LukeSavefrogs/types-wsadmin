{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This project aims to provide a better developer experience while developing <code>wsadmin</code> scripts for IBM\u00ae Websphere Application Server.</p> <p>It does so by providing:</p> <ul> <li>Autocompletion through the intellisense.</li> <li>Type hints (function parameters and function return types)</li> </ul> <p>This leads to lots of advantages to the developer, such as:</p> <ul> <li>Faster development, since you don't need to leave the editor to know what was the name of some method.</li> <li>Less errors, since you don't need to manually re-type the method names and an error will show up if you mistype the methods.</li> </ul> <p>Warning</p> <p>The <code>wsadmin</code> scripting tool only supports Jython up to 2.7 (some still have Jython 2.1!), so the following requirements must still be satisfied:</p> <ul> <li>you MUST use Python 2 syntax (check the Jython version to know which one you'll need to target)</li> <li>some packages available on development environments might not be available or might have some differences.</li> </ul> <p>Make sure to check that your script matches your workplace/environment requirements before submitting it. This package DOES NOT in any way prevent you from writing bugged code, or could even contain old modules not used anymore in the official documentation (since it was originally written for my workplace production environment using Websphere Application Server 8.5.5/9.0 and Jython 2.1).</p> <p>Always check that your environment requirements/versions are the same as this library. </p>"},{"location":"#gallery","title":"Gallery","text":"<p>Here's some screenshots showing the features of this package. The IDE I'm using here is Visual Studio Code.</p> <p> </p> Autocompletion for the <code>AdminControl</code> command. <p> </p> Type hint for function parameters as well as return types. <p> </p> An error will show up if you mistype the method. <p> </p> Autocompletion based on the <code>AdminConfig.attributes(...)</code> return type (<code>str</code>)."},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This is an unofficial package created for speeding up the development process and is not in any way affiliated with IBM\u00ae. All trademarks and registered trademarks are the property of their respective company owners.</p> <p>The code does not include any implementation detail, and includes only the informations (such as parameter numbers, types and descriptions) publicly available on the official Websphere Application Server\u00ae documentation.</p>"},{"location":"getting-started/","title":"Getting started","text":"<p>This section will guide you through the installation and setup of the development environment.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>The first step is to install the <code>wsadmin-type-hints</code> package.</p> <ul> <li> <p>Using <code>pip</code> (global install): <pre><code>pip install wsadmin-type-hints\n</code></pre></p> </li> <li> <p>Using <code>poetry</code>: <pre><code>poetry add wsadmin-type-hints --group dev \n</code></pre></p> </li> <li> <p>Using <code>pipenv</code>: <pre><code>pipenv install --dev wsadmin-type-hints\n</code></pre></p> </li> <li> <p>For other dependency managers (such as pdm or hatch) see the respective documentation...</p> </li> </ul> <p>Note</p> <p>If installed inside a virtual environment, you may need to activate it first, to be able to use it.</p>"},{"location":"getting-started/#usage","title":"Usage","text":"<p>The <code>wsadmin-type-hints</code> package is intended to be used to provide type hints to the Python interpreter used by IDE language servers (such as Pylance).  Because of this, the functions do not contain actual code and their body is always empty.</p> <p>The following steps will allow you to make use of modern IDE intellisense for <code>wsadmin</code> objects:</p> <ol> <li> <p>To differentiate between the development and production environment we can use a <code>try..except</code> block: <pre><code>try:\n(AdminControl, AdminConfig, AdminApp, AdminTask, Help)\nexcept NameError:\n# wsadmin objects are not defined, so this is the development environment.\nfrom wsadmin_type_hints import *\nelse:\nprint(\"Production environment, i'm not needed here \ud83d\ude03\")\n</code></pre>     This block could even be left as-is in the code deployed on the production server (maybe leaving out the emoji before uploading \ud83d\ude07), since it won't ever reach the import (and even then the script would simply fail because of the <code>wsadmin-type-hints</code> package not being there).</p> </li> <li> <p>Use the <code>wsadmin</code> objects like always:  <pre><code>current_cell = AdminControl.getCell()\nprint(\"Current cell: %s\" % current_cell)\n</code></pre></p> </li> </ol>"},{"location":"resources/","title":"Useful resources","text":""},{"location":"resources/#official-ibm-documentation","title":"Official IBM documentation","text":"<ul> <li>Online <code>wsadmin</code> documentation</li> <li>(PDF) Jython scripting with <code>wsadmin</code> tutorial</li> <li>(PDF) Scripting various types of applications - Very big file (&gt; 700 pages) with lots of info on how to automate a large range of operations by making use of the <code>wsadmin</code>.</li> </ul>"},{"location":"resources/#python-documentation","title":"Python documentation","text":"<ul> <li>Python 2.1</li> <li>Python 2.7</li> </ul>"},{"location":"resources/#collection-of-scripts","title":"Collection of scripts","text":"<ul> <li><code>wsadmin-tools</code> by @sgurjar - Collection of useful functions meant to ease server administration through <code>wsadmin</code>.</li> <li><code>wsadminlib</code> by @wsadminlib - A library which simplifies configuration of IBM WebSphere AppServer using python scripting.</li> </ul>"},{"location":"resources/#other","title":"Other","text":"<ul> <li>Stackoverflow - Doesn't need any explanation \ud83d\ude36</li> <li>FreeKB \"IBM Websphere\" articles - Collection of articles about the administration of an \"IBM WebSphere Application Server\" infrastructure (not only with <code>wsadmin</code>)</li> <li>WsAdmin Objects - Simple explanation of the difference between the 4 main objects used by the <code>wsadmin</code></li> <li>SetGetWeb WAS - Something is ripped from the IBM documentation, something else is useful; worth of a glance anyway.</li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>wsadmin_type_hints<ul> <li>AdminApp</li> <li>AdminConfig</li> <li>AdminControl</li> <li>AdminTask</li> <li>Help</li> <li>wsadmin_types</li> </ul> </li> </ul>"},{"location":"reference/wsadmin_type_hints/","title":"wsadmin_type_hints","text":"<p><code>import</code> this module to gain intellisense on the 5 main <code>wsadmin.sh</code> Jython language objects:</p> <ul> <li><code>AdminControl</code></li> <li><code>AdminConfig</code></li> <li><code>AdminApp</code></li> <li><code>AdminTask</code></li> <li><code>Help</code></li> </ul> <p>Use it like this: <pre><code>try:\n(AdminControl, AdminConfig, AdminApp, AdminTask, Help)\nexcept NameError:\nfrom wsadmin_type_hints import *\nelse:\nprint(\"AdminControl is already defined, no shim needed\")\n</code></pre></p> <p>This way it will be imported only in your development environment.</p>"},{"location":"reference/wsadmin_type_hints/#wsadmin_type_hints.__all__","title":"<code>__all__ = ['AdminApp', 'AdminConfig', 'AdminTask', 'AdminControl', 'Help']</code>  <code>module-attribute</code>","text":""},{"location":"reference/wsadmin_type_hints/AdminApp/","title":"AdminApp","text":"<p>Use the <code>AdminApp</code> object to install, modify, and administer applications.</p> <p>The <code>AdminApp</code> object interacts with the WebSphere\u00ae Application Server management  and configuration services to make application inquiries and changes.</p> <p>This interaction includes installing and uninstalling applications, listing modules,  exporting, and so on.</p> <p>For more info see the official documentation.</p>"},{"location":"reference/wsadmin_type_hints/AdminApp/#wsadmin_type_hints.AdminApp.deleteUserAndGroupEntries","title":"<code>AdminApp.deleteUserAndGroupEntries()</code>","text":"Source code in <code>wsadmin_type_hints/AdminApp.py</code> <pre><code>def deleteUserAndGroupEntries(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminApp/#wsadmin_type_hints.AdminApp.edit","title":"<code>AdminApp.edit()</code>","text":"Source code in <code>wsadmin_type_hints/AdminApp.py</code> <pre><code>def edit(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminApp/#wsadmin_type_hints.AdminApp.editInteractive","title":"<code>AdminApp.editInteractive()</code>","text":"Source code in <code>wsadmin_type_hints/AdminApp.py</code> <pre><code>def editInteractive(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminApp/#wsadmin_type_hints.AdminApp.export","title":"<code>AdminApp.export()</code>","text":"Source code in <code>wsadmin_type_hints/AdminApp.py</code> <pre><code>def export(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminApp/#wsadmin_type_hints.AdminApp.exportDDL","title":"<code>AdminApp.exportDDL()</code>","text":"Source code in <code>wsadmin_type_hints/AdminApp.py</code> <pre><code>def exportDDL(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminApp/#wsadmin_type_hints.AdminApp.exportFile","title":"<code>AdminApp.exportFile()</code>","text":"Source code in <code>wsadmin_type_hints/AdminApp.py</code> <pre><code>def exportFile(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminApp/#wsadmin_type_hints.AdminApp.getDeployStatus","title":"<code>AdminApp.getDeployStatus()</code>","text":"Source code in <code>wsadmin_type_hints/AdminApp.py</code> <pre><code>def getDeployStatus(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminApp/#wsadmin_type_hints.AdminApp.help","title":"<code>AdminApp.help()</code>","text":"Source code in <code>wsadmin_type_hints/AdminApp.py</code> <pre><code>def help(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminApp/#wsadmin_type_hints.AdminApp.install","title":"<code>AdminApp.install()</code>","text":"Source code in <code>wsadmin_type_hints/AdminApp.py</code> <pre><code>def install(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminApp/#wsadmin_type_hints.AdminApp.installInteractive","title":"<code>AdminApp.installInteractive()</code>","text":"Source code in <code>wsadmin_type_hints/AdminApp.py</code> <pre><code>def installInteractive(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminApp/#wsadmin_type_hints.AdminApp.isAppReady","title":"<code>AdminApp.isAppReady()</code>","text":"Source code in <code>wsadmin_type_hints/AdminApp.py</code> <pre><code>def isAppReady(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminApp/#wsadmin_type_hints.AdminApp.list","title":"<code>AdminApp.list()</code>","text":"Source code in <code>wsadmin_type_hints/AdminApp.py</code> <pre><code>def list(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminApp/#wsadmin_type_hints.AdminApp.listModules","title":"<code>AdminApp.listModules()</code>","text":"Source code in <code>wsadmin_type_hints/AdminApp.py</code> <pre><code>def listModules(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminApp/#wsadmin_type_hints.AdminApp.options","title":"<code>AdminApp.options()</code>","text":"Source code in <code>wsadmin_type_hints/AdminApp.py</code> <pre><code>def options(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminApp/#wsadmin_type_hints.AdminApp.publishWSDL","title":"<code>AdminApp.publishWSDL()</code>","text":"Source code in <code>wsadmin_type_hints/AdminApp.py</code> <pre><code>def publishWSDL(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminApp/#wsadmin_type_hints.AdminApp.searchJNDIReferences","title":"<code>AdminApp.searchJNDIReferences()</code>","text":"Source code in <code>wsadmin_type_hints/AdminApp.py</code> <pre><code>def searchJNDIReferences(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminApp/#wsadmin_type_hints.AdminApp.taskInfo","title":"<code>AdminApp.taskInfo()</code>","text":"Source code in <code>wsadmin_type_hints/AdminApp.py</code> <pre><code>def taskInfo(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminApp/#wsadmin_type_hints.AdminApp.uninstall","title":"<code>AdminApp.uninstall()</code>","text":"Source code in <code>wsadmin_type_hints/AdminApp.py</code> <pre><code>def uninstall(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminApp/#wsadmin_type_hints.AdminApp.update","title":"<code>AdminApp.update()</code>","text":"Source code in <code>wsadmin_type_hints/AdminApp.py</code> <pre><code>def update(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminApp/#wsadmin_type_hints.AdminApp.updateAccessIDs","title":"<code>AdminApp.updateAccessIDs()</code>","text":"Source code in <code>wsadmin_type_hints/AdminApp.py</code> <pre><code>def updateAccessIDs(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminApp/#wsadmin_type_hints.AdminApp.updateInteractive","title":"<code>AdminApp.updateInteractive()</code>","text":"Source code in <code>wsadmin_type_hints/AdminApp.py</code> <pre><code>def updateInteractive(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminApp/#wsadmin_type_hints.AdminApp.view","title":"<code>AdminApp.view()</code>","text":"Source code in <code>wsadmin_type_hints/AdminApp.py</code> <pre><code>def view(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/","title":"AdminConfig","text":"<p>Use the <code>AdminConfig</code> object to invoke configuration commands and to create or  change elements of the WebSphere\u00ae Application Server configuration, for example,  creating a data source.</p> <p>For more info see the official documentation.</p>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.attributes","title":"<code>AdminConfig.attributes(object_type)</code>","text":"<p>Get a multiline string containing the top level attributes for the given type.</p> <p>Parameters:</p> Name Type Description Default <code>object_type</code> <code>str</code> <p>name of the object type. Use <code>AdminConfig.types()</code> to get a list of available types.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Multiline string with the top level attributes for the given type.</p> Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def attributes(object_type: str) -&gt; str:\n\"\"\"Get a multiline string containing the top level attributes for the given type.\n    Args:\n        object_type (str): name of the object type. Use `AdminConfig.types()` to get a list of available types.\n    Returns:\n        str: Multiline string with the top level attributes for the given type.\n    \"\"\"\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.checkin","title":"<code>AdminConfig.checkin(document_uri, file_name, opaque_object)</code>","text":"<p>Checks a file that the document URI describes into the configuration repository. This method only applies to deployment manager configurations.</p> <p>Parameters:</p> Name Type Description Default <code>document_uri</code> <code>str</code> <p>The document URI, relative to the root of the configuration repository.</p> required <code>file_name</code> <code>str</code> <p>The name of the source file to check.</p> required <code>opaque_object</code> <code>_OpaqueDigestObject</code> <p>The object returned by a prior call to the <code>AdminConfig.extract()</code> command.</p> required Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def checkin(document_uri: str, file_name: str, opaque_object: _OpaqueDigestObject) -&gt; Any:\n\"\"\"Checks a file that the document URI describes into the configuration repository.\n    This method only applies to deployment manager configurations.\n    Args:\n        document_uri (str): The document URI, relative to the root of the configuration repository.\n        file_name (str): The name of the source file to check.\n        opaque_object (_OpaqueDigestObject): The object returned by a prior call to the `AdminConfig.extract()` command.\n    \"\"\"\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.convertToCluster","title":"<code>AdminConfig.convertToCluster()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def convertToCluster(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.create","title":"<code>AdminConfig.create()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def create(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.createClusterMember","title":"<code>AdminConfig.createClusterMember()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def createClusterMember(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.createDocument","title":"<code>AdminConfig.createDocument()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def createDocument(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.createUsingTemplate","title":"<code>AdminConfig.createUsingTemplate()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def createUsingTemplate(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.defaults","title":"<code>AdminConfig.defaults()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def defaults(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.deleteDocument","title":"<code>AdminConfig.deleteDocument()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def deleteDocument(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.existsDocument","title":"<code>AdminConfig.existsDocument()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def existsDocument(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.extract","title":"<code>AdminConfig.extract(document_uri, filename)</code>","text":"<p>Extracts a configuration repository file that is described by the document URI and places it in the file named by filename.  This method only applies to deployment manager configurations.</p> <p>Parameters:</p> Name Type Description Default <code>document_uri</code> <code>str</code> <p>The document URI, relative to the root of the configuration repository. This MUST exist in the repository.</p> required <code>filename</code> <code>str</code> <p>The name of the source file to check. If it exists already, it will be overwritten.</p> required <p>Returns:</p> Name Type Description <code>_OpaqueDigestObject</code> <code>_OpaqueDigestObject</code> <p>An opaque \"digest\" object which should be used to check the file back in using the checkin command.</p> Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def extract(document_uri: str, filename: str) -&gt; _OpaqueDigestObject:\n\"\"\"Extracts a configuration repository file that is described by the document URI and places it in the file named by filename. \n    This method only applies to deployment manager configurations.\n    Args:\n        document_uri (str): The document URI, relative to the root of the configuration repository. This MUST exist in the repository.\n        filename (str): The name of the source file to check. If it exists already, it will be overwritten.\n    Returns:\n        _OpaqueDigestObject: An opaque \"digest\" object which should be used to check the file back in using the checkin command.\n    \"\"\"\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.getCrossDocumentValidationEnabled","title":"<code>AdminConfig.getCrossDocumentValidationEnabled()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def getCrossDocumentValidationEnabled(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.getObjectName","title":"<code>AdminConfig.getObjectName()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def getObjectName(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.getObjectType","title":"<code>AdminConfig.getObjectType()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def getObjectType(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.getSaveMode","title":"<code>AdminConfig.getSaveMode()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def getSaveMode(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.getValidationLevel","title":"<code>AdminConfig.getValidationLevel()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def getValidationLevel(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.getValidationSeverityResult","title":"<code>AdminConfig.getValidationSeverityResult()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def getValidationSeverityResult(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.getid","title":"<code>AdminConfig.getid()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def getid(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.hasChanges","title":"<code>AdminConfig.hasChanges()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def hasChanges(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.help","title":"<code>AdminConfig.help()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def help(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.installResourceAdapter","title":"<code>AdminConfig.installResourceAdapter()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def installResourceAdapter(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.list","title":"<code>AdminConfig.list()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def list(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.listTemplates","title":"<code>AdminConfig.listTemplates()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def listTemplates(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.modify","title":"<code>AdminConfig.modify()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def modify(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.parents","title":"<code>AdminConfig.parents()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def parents(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.queryChanges","title":"<code>AdminConfig.queryChanges()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def queryChanges(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.remove","title":"<code>AdminConfig.remove()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def remove(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.required","title":"<code>AdminConfig.required()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def required(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.reset","title":"<code>AdminConfig.reset()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def reset(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.resetAttributes","title":"<code>AdminConfig.resetAttributes()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def resetAttributes(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.save","title":"<code>AdminConfig.save()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def save(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.setCrossDocumentValidationEnabled","title":"<code>AdminConfig.setCrossDocumentValidationEnabled()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def setCrossDocumentValidationEnabled(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.setSaveMode","title":"<code>AdminConfig.setSaveMode()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def setSaveMode(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.setValidationLevel","title":"<code>AdminConfig.setValidationLevel()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def setValidationLevel(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.show","title":"<code>AdminConfig.show()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def show(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.showAttribute","title":"<code>AdminConfig.showAttribute()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def showAttribute(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.showall","title":"<code>AdminConfig.showall()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def showall(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.types","title":"<code>AdminConfig.types()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def types(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.uninstallResourceAdapter","title":"<code>AdminConfig.uninstallResourceAdapter()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def uninstallResourceAdapter(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.unsetAttributes","title":"<code>AdminConfig.unsetAttributes()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def unsetAttributes(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminConfig/#wsadmin_type_hints.AdminConfig.validate","title":"<code>AdminConfig.validate()</code>","text":"Source code in <code>wsadmin_type_hints/AdminConfig.py</code> <pre><code>def validate(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/","title":"AdminControl","text":"<p>Use the AdminControl object to invoke operational commands that manage objects for the application server.</p> <p>Many of the AdminControl commands have multiple signatures so that they can either invoke in a raw mode using  parameters that are specified by Java Management Extensions (JMX), or by using strings for parameters.  In addition to operational commands, the AdminControl object supports some utility commands for tracing,  reconnecting with a server, and converting data types.</p> <p>For more info see the official documentation.</p>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.completeObjectName","title":"<code>AdminControl.completeObjectName(object_name, template='')</code>","text":"<p>Use the <code>completeObjectName</code> command to create a string representation of a complete <code>ObjectName</code> value  that is based on a fragment. </p> <p>This command does not communicate with the server to find a matching <code>ObjectName</code> value. </p> <p>If the system finds several MBeans that match the fragment, the command returns the first one. </p> <p>Parameters:</p> Name Type Description Default <code>object_name</code> <code>ObjectName</code> <p>Specifies the name of the object to complete.</p> required <code>template</code> <code>str</code> <p>Specifies the name of the template to use. For example, the template might be <code>type=Server,*.</code>.</p> <code>''</code> <p>Example: <pre><code>server_on = AdminControl.completeObjectName('node=mynode,type=Server,*')\n</code></pre></p> Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def completeObjectName(object_name, template=\"\"):\n\"\"\" \n    Use the `completeObjectName` command to create a string representation of a complete `ObjectName` value \n    that is based on a fragment. \n    This command does not communicate with the server to find a matching `ObjectName` value. \n    If the system finds several MBeans that match the fragment, the command returns the first one. \n    Args:\n        object_name (ObjectName): Specifies the name of the object to complete.\n        template (str): Specifies the name of the template to use. For example, the template might be `type=Server,*.`.\n    Example:\n    ```\n    server_on = AdminControl.completeObjectName('node=mynode,type=Server,*')\n    ```\n    \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.getAttribute","title":"<code>AdminControl.getAttribute(object_name, attribute)</code>","text":"<p>Use the <code>getAttribute</code> command to return the value of the attribute for the name that you provide.</p> <p>If you use the <code>getAttribute</code> command to determine the state of an application, one of the following values is returned: - 0 - which indicates that the application is starting - 1 - which indicates that the application has started - 2 - which indicates that the application is stopping - 3 - which indicates that the application has stopped - 4 - which indicates that the application failed to start</p> <p>Parameters:</p> Name Type Description Default <code>object_name</code> <code>ObjectName</code> <p>Specifies the object name of the MBean of interest.</p> required <code>attribute</code> <code>str</code> <p>Specifies the name of the attribute to query.</p> required <p>Example: <pre><code>objNameString = AdminControl.completeObjectName('WebSphere:type=Server,*') \nprocess_type  = AdminControl.getAttribute(objNameString, 'processType')\n\nprint(process_type)\n</code></pre></p> Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def getAttribute(object_name, attribute):\n\"\"\"Use the `getAttribute` command to return the value of the attribute for the name that you provide.\n    If you use the `getAttribute` command to determine the state of an application, one of the following values is returned:\n    - 0 - which indicates that the application is starting\n    - 1 - which indicates that the application has started\n    - 2 - which indicates that the application is stopping\n    - 3 - which indicates that the application has stopped\n    - 4 - which indicates that the application failed to start\n    Args:\n        object_name (ObjectName): Specifies the object name of the MBean of interest.\n        attribute (str): Specifies the name of the attribute to query.\n    Example:\n    ```\n    objNameString = AdminControl.completeObjectName('WebSphere:type=Server,*') \n    process_type  = AdminControl.getAttribute(objNameString, 'processType')\n    print(process_type)\n    ```\n    \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.getAttribute_jmx","title":"<code>AdminControl.getAttribute_jmx(object_name, attribute)</code>","text":"<p>Use the <code>getAttribute_jmx</code> command to return the value of the attribute for the name that you provide.</p> <p>Parameters:</p> Name Type Description Default <code>object_name</code> <code>ObjectName</code> <p>Specifies the object name of the MBean of interest.</p> required <code>attribute</code> <code>str</code> <p>Specifies the name of the attribute to query.</p> required <p>Example: <pre><code>import javax.management as mgmt \n\nobjNameString = AdminControl.completeObjectName('WebSphere:=type=Server,*') \nobjName       = mgmt.ObjectName(objNameString)\nprocess_type  = AdminControl.getAttribute_jmx(objName, 'processType')\n\nprint(process_type)\n</code></pre></p> Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def getAttribute_jmx(object_name, attribute):\n\"\"\"Use the `getAttribute_jmx` command to return the value of the attribute for the name that you provide.\n    Args:\n        object_name (ObjectName): Specifies the object name of the MBean of interest.\n        attribute (str): Specifies the name of the attribute to query.\n    Example:\n    ```\n    import javax.management as mgmt \n    objNameString = AdminControl.completeObjectName('WebSphere:=type=Server,*') \n    objName       = mgmt.ObjectName(objNameString)\n    process_type  = AdminControl.getAttribute_jmx(objName, 'processType')\n    print(process_type)\n    ```\n    \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.getAttributes","title":"<code>AdminControl.getAttributes(object_name, attributes)</code>","text":"<p>Use the getAttributes command to return the attribute values for the names that you provide.</p> <p>Parameters:</p> Name Type Description Default <code>object_name</code> <code>ObjectName</code> <p>Use the getAttributes command to return the attribute values for the names that you provide.</p> required <code>attributes</code> <code>java.lang.String[] or java.lang.Object[]</code> <p>Specifies the names of the attributes to query.</p> required <p>Example: - Using Jython with string attributes:</p> <pre><code>objNameString = AdminControl.completeObjectname('WebSphere:type=Server,*)\nattributes    = AdminControl.getAttributes(objNameString, '[cellName nodeName]')\n\nprint(attributes)\n</code></pre> <ul> <li>Using Jython with object attributes:</li> </ul> <pre><code>objNameString = AdminControl.completeObjectname('WebSphere:type=Server,*)\nattributes    = AdminControl.getAttributes(objNameString, ['cellName', 'nodeName'])\n\nprint(attributes)\n</code></pre> Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def getAttributes(object_name, attributes):\n\"\"\"Use the getAttributes command to return the attribute values for the names that you provide.\n    Args:\n        object_name (ObjectName): Use the getAttributes command to return the attribute values for the names that you provide.\n        attributes (java.lang.String[] or java.lang.Object[]): Specifies the names of the attributes to query.\n    Example:\n    - Using Jython with string attributes:\n    ```\n    objNameString = AdminControl.completeObjectname('WebSphere:type=Server,*)\n    attributes    = AdminControl.getAttributes(objNameString, '[cellName nodeName]')\n    print(attributes)\n    ```\n    - Using Jython with object attributes:\n    ```\n    objNameString = AdminControl.completeObjectname('WebSphere:type=Server,*)\n    attributes    = AdminControl.getAttributes(objNameString, ['cellName', 'nodeName'])\n    print(attributes)\n    ```\n    \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.getAttributes_jmx","title":"<code>AdminControl.getAttributes_jmx()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def getAttributes_jmx(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.getCell","title":"<code>AdminControl.getCell()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def getCell(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.getConfigId","title":"<code>AdminControl.getConfigId()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def getConfigId(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.getDefaultDomain","title":"<code>AdminControl.getDefaultDomain()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def getDefaultDomain(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.getDomainName","title":"<code>AdminControl.getDomainName()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def getDomainName(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.getHost","title":"<code>AdminControl.getHost()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def getHost(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.getMBeanCount","title":"<code>AdminControl.getMBeanCount()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def getMBeanCount(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.getMBeanInfo_jmx","title":"<code>AdminControl.getMBeanInfo_jmx()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def getMBeanInfo_jmx(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.getNode","title":"<code>AdminControl.getNode()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def getNode(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.getObjectInstance","title":"<code>AdminControl.getObjectInstance()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def getObjectInstance(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.getPort","title":"<code>AdminControl.getPort()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def getPort(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.getPropertiesForDataSource","title":"<code>AdminControl.getPropertiesForDataSource()</code>","text":"<p>(Deprecated)</p> Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def getPropertiesForDataSource(): # undocumented\n\"\"\" (Deprecated) \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.getType","title":"<code>AdminControl.getType()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def getType(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.help","title":"<code>AdminControl.help()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def help(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.invoke","title":"<code>AdminControl.invoke()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def invoke(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.invoke_jmx","title":"<code>AdminControl.invoke_jmx()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def invoke_jmx(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.isRegistered","title":"<code>AdminControl.isRegistered()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def isRegistered(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.isRegistered_jmx","title":"<code>AdminControl.isRegistered_jmx()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def isRegistered_jmx(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.makeObjectName","title":"<code>AdminControl.makeObjectName()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def makeObjectName(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.queryMBeans","title":"<code>AdminControl.queryMBeans()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def queryMBeans(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.queryNames","title":"<code>AdminControl.queryNames()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def queryNames() -&gt; str: # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.queryNames_jmx","title":"<code>AdminControl.queryNames_jmx()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def queryNames_jmx(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.reconnect","title":"<code>AdminControl.reconnect()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def reconnect(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.setAttribute","title":"<code>AdminControl.setAttribute()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def setAttribute(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.setAttribute_jmx","title":"<code>AdminControl.setAttribute_jmx()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def setAttribute_jmx(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.setAttributes","title":"<code>AdminControl.setAttributes()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def setAttributes(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.setAttributes_jmx","title":"<code>AdminControl.setAttributes_jmx()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def setAttributes_jmx(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.startServer","title":"<code>AdminControl.startServer()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def startServer(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.stopServer","title":"<code>AdminControl.stopServer()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def stopServer(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.testConnection","title":"<code>AdminControl.testConnection()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def testConnection(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminControl/#wsadmin_type_hints.AdminControl.trace","title":"<code>AdminControl.trace()</code>","text":"Source code in <code>wsadmin_type_hints/AdminControl.py</code> <pre><code>def trace(): # undocumented\n\"\"\" \"\"\"\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminTask/","title":"AdminTask","text":"<p>Use the <code>AdminTask</code> object to run administrative commands with the <code>wsadmin</code> tool.</p> <p>Administrative commands are loaded dynamically when you start the <code>wsadmin</code> tool.  The administrative commands that are available for you to use, and what you can do  with them, depends on the edition of the product that you use.</p> <p>For more info see the official documentation.</p>"},{"location":"reference/wsadmin_type_hints/AdminTask/#wsadmin_type_hints.AdminTask.createTCPEndPoint","title":"<code>AdminTask.createTCPEndPoint()</code>","text":"Source code in <code>wsadmin_type_hints/AdminTask.py</code> <pre><code>def createTCPEndPoint(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminTask/#wsadmin_type_hints.AdminTask.getTCPEndPoint","title":"<code>AdminTask.getTCPEndPoint()</code>","text":"Source code in <code>wsadmin_type_hints/AdminTask.py</code> <pre><code>def getTCPEndPoint(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminTask/#wsadmin_type_hints.AdminTask.help","title":"<code>AdminTask.help()</code>","text":"Source code in <code>wsadmin_type_hints/AdminTask.py</code> <pre><code>def help(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminTask/#wsadmin_type_hints.AdminTask.listTCPEndPoints","title":"<code>AdminTask.listTCPEndPoints()</code>","text":"Source code in <code>wsadmin_type_hints/AdminTask.py</code> <pre><code>def listTCPEndPoints(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminTask/#wsadmin_type_hints.AdminTask.listTCPThreadPools","title":"<code>AdminTask.listTCPThreadPools()</code>","text":"Source code in <code>wsadmin_type_hints/AdminTask.py</code> <pre><code>def listTCPThreadPools(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/AdminTask/#wsadmin_type_hints.AdminTask.updateAppOnCluster","title":"<code>AdminTask.updateAppOnCluster()</code>","text":"Source code in <code>wsadmin_type_hints/AdminTask.py</code> <pre><code>def updateAppOnCluster(): # undocumented\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/Help/","title":"Help","text":"<p>You can use the Jython or Jacl scripting languages to find general help and dynamic online information about the currently running MBeans with the <code>wsadmin</code> tool. </p> <p>Use the <code>Help</code> object as an aid in writing and running scripts with the <code>AdminControl</code> object.</p> <p>For more info see the official documentation.</p>"},{"location":"reference/wsadmin_type_hints/Help/#wsadmin_type_hints.Help.AdminApp","title":"<code>Help.AdminApp()</code>","text":"<p>Use the <code>AdminApp</code> command to view a summary of each available method for the <code>AdminApp</code> object.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The list of available methods for the <code>AdminApp</code> object.</p> Example <pre><code>&gt;&gt;&gt; print(Help.AdminApp())\n    WASX7095I: The AdminApp object allows application objects to\n    be manipulated -- this includes installing, uninstalling, editing,\n    and listing.  Most of the commands supported by AdminApp operate in two\n    modes: the default mode is one in which AdminApp communicates with the\n    product to accomplish its tasks.  A local mode is also\n    possible, in which no server communication takes place.  The local\n    mode of operation is invoked by bringing up the scripting client with\n    no server connected using the command line \"-conntype NONE\" option or setting the \n    \"com.ibm.ws.scripting.connectionType=NONE\" property in the wsadmin.properties.\n    [...]\n</code></pre> Source code in <code>wsadmin_type_hints/Help.py</code> <pre><code>def AdminApp() -&gt; str:\n\"\"\"\n    Use the `AdminApp` command to view a summary of each available method for the `AdminApp` object.\n    Returns:\n        str: The list of available methods for the `AdminApp` object.\n    Example:\n        ```pycon\n        &gt;&gt;&gt; print(Help.AdminApp())\n            WASX7095I: The AdminApp object allows application objects to\n            be manipulated -- this includes installing, uninstalling, editing,\n            and listing.  Most of the commands supported by AdminApp operate in two\n            modes: the default mode is one in which AdminApp communicates with the\n            product to accomplish its tasks.  A local mode is also\n            possible, in which no server communication takes place.  The local\n            mode of operation is invoked by bringing up the scripting client with\n            no server connected using the command line \"-conntype NONE\" option or setting the \n            \"com.ibm.ws.scripting.connectionType=NONE\" property in the wsadmin.properties.\n            [...]\n        ```\n    \"\"\"\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/Help/#wsadmin_type_hints.Help.AdminConfig","title":"<code>Help.AdminConfig()</code>","text":"<p>Use the <code>AdminConfig</code> command to view a summary of each available method for the <code>AdminConfig</code> object.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The list of available methods for the <code>AdminConfig</code> object.</p> Example <pre><code>&gt;&gt;&gt; print(Help.AdminApp())\n    WASX7053I: The following functions are supported by AdminConfig: \n    [...]\n</code></pre> Source code in <code>wsadmin_type_hints/Help.py</code> <pre><code>def AdminConfig() -&gt; str:\n\"\"\"Use the `AdminConfig` command to view a summary of each available method for the `AdminConfig` object.\n    Returns:\n        str: The list of available methods for the `AdminConfig` object.\n    Example:\n        ```pycon\n        &gt;&gt;&gt; print(Help.AdminApp())\n            WASX7053I: The following functions are supported by AdminConfig: \n            [...]\n        ```\n    \"\"\"\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/Help/#wsadmin_type_hints.Help.AdminControl","title":"<code>Help.AdminControl()</code>","text":"<p>Use the <code>AdminControl</code> command to view a summary of the help commands and ways to invoke an administrative command.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The list of available methods for the <code>AdminControl</code> command.</p> Example <pre><code>&gt;&gt;&gt; print(Help.AdminControl())\n    WASX7027I: The following functions are supported by AdminControl:\n    [...]\n</code></pre> Source code in <code>wsadmin_type_hints/Help.py</code> <pre><code>def AdminControl() -&gt; str:\n\"\"\"Use the `AdminControl` command to view a summary of the help commands and ways to invoke an administrative command.\n    Returns:\n        str: The list of available methods for the `AdminControl` command.\n    Example:\n        ```pycon\n        &gt;&gt;&gt; print(Help.AdminControl())\n            WASX7027I: The following functions are supported by AdminControl:\n            [...]\n        ```\n    \"\"\"\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/Help/#wsadmin_type_hints.Help.AdminTask","title":"<code>Help.AdminTask()</code>","text":"<p>Use the <code>AdminTask</code> command to view a summary of help commands and ways to invoke an administrative command with the AdminTask object.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The list of available methods for the <code>AdminTask</code> command.</p> Example <pre><code>&gt;&gt;&gt; print(Help.AdminTask())\n    WASX8001I: The AdminTask object enables the available administrative commands. AdminTask commands \n    operate in two modes: the default mode is one whichAdminTask communicates with the\n    product to accomplish its task. A local mode \n    is also available in which no server communication takes place. The local mode of operation is invoked by \n    bringing up the scripting client using the command line \"-conntype NONE\" option or setting the\n    \"com.ibm.ws.scripting.connectiontype=NONE\" property in wsadmin.properties file.\n    [...]\n</code></pre> Source code in <code>wsadmin_type_hints/Help.py</code> <pre><code>def AdminTask() -&gt; str:\n\"\"\"Use the `AdminTask` command to view a summary of help commands and ways to invoke an administrative command with the AdminTask object.\n    Returns:\n        str: The list of available methods for the `AdminTask` command.\n    Example:\n        ```pycon\n        &gt;&gt;&gt; print(Help.AdminTask())\n            WASX8001I: The AdminTask object enables the available administrative commands. AdminTask commands \n            operate in two modes: the default mode is one whichAdminTask communicates with the\n            product to accomplish its task. A local mode \n            is also available in which no server communication takes place. The local mode of operation is invoked by \n            bringing up the scripting client using the command line \"-conntype NONE\" option or setting the\n            \"com.ibm.ws.scripting.connectiontype=NONE\" property in wsadmin.properties file.\n            [...]\n        ```\n    \"\"\"\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/Help/#wsadmin_type_hints.Help.all","title":"<code>Help.all(mbean_name)</code>","text":"<p>Use the <code>all</code> command to view a summary of the information that the MBean defines by name.</p> <p>Parameters:</p> Name Type Description Default <code>mbean_name</code> <code>str</code> <p>The object name which identifies the desired MBean.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Summary of the information requested.</p> Example <pre><code>&gt;&gt;&gt; mbean = AdminControl.queryNames('type=Server,*').splitlines()[0]\n&gt;&gt;&gt; print(Help.all(mbean))\n    Description: Managed object for overall server process.\n    Class name: javax.management.modelmbean.RequiredModelMBean\n    Attribute                       Type                            Access\n    name                            java.lang.String                RO\n    shortName                       java.lang.String                RO\n    threadMonitorInterval           int                             RW\n    threadMonitorThreshold          int                             RW\n    threadMonitorAdjustmentThreshold  int                             RW\n    pid                             java.lang.String                RO\n    cellName                        java.lang.String                RO\n    cellShortName                   java.lang.String                RO\n    [...]\n</code></pre> Source code in <code>wsadmin_type_hints/Help.py</code> <pre><code>def all(mbean_name: str) -&gt; str: # undocumented\n\"\"\"Use the `all` command to view a summary of the information that the MBean defines by name.\n    Args:\n        mbean_name (str): The object name which identifies the desired MBean.\n    Returns:\n        str: Summary of the information requested.\n    Example:\n        ```pycon\n        &gt;&gt;&gt; mbean = AdminControl.queryNames('type=Server,*').splitlines()[0]\n        &gt;&gt;&gt; print(Help.all(mbean))\n            Description: Managed object for overall server process.\n            Class name: javax.management.modelmbean.RequiredModelMBean\n            Attribute                       Type                            Access\n            name                            java.lang.String                RO\n            shortName                       java.lang.String                RO\n            threadMonitorInterval           int                             RW\n            threadMonitorThreshold          int                             RW\n            threadMonitorAdjustmentThreshold  int                             RW\n            pid                             java.lang.String                RO\n            cellName                        java.lang.String                RO\n            cellShortName                   java.lang.String                RO\n            [...]\n        ```\n    \"\"\"\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/Help/#wsadmin_type_hints.Help.attributes","title":"<code>Help.attributes(mbean_name, attribute_name=None)</code>","text":"<p>Use the <code>attributes</code> command to view a summary of all the attributes that the MBean defines by name. </p> <ul> <li> <p>If you provide the <code>mbean_name</code> parameter, the command displays information about the attributes, operations,      constructors, description, notifications, and classname of the specified MBean. </p> </li> <li> <p>If you specify the <code>mbean_name</code> and <code>attribute_name</code>, the command displays information about the      specified attribute for the specified MBean.</p> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>mbean_name</code> <code>str</code> <p>The object name which identifies the desired MBean.</p> required <code>attribute_name</code> <code>str</code> <p>The attribute of interest. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Summary of all the attributes of the specified MBean</p> Example <pre><code>&gt;&gt;&gt; mbean = AdminControl.queryNames('type=Server,*').splitlines()[0]\n&gt;&gt;&gt; print(Help.attributes(mbean))\n    Attribute                       Type                            Access\n    name                            java.lang.String                RO\n    shortName                       java.lang.String                RO\n    threadMonitorInterval           int                             RW\n    threadMonitorThreshold          int                             RW\n    threadMonitorAdjustmentThreshold  int                             RW\n    [...]\n&gt;&gt;&gt; print(Help.attributes(mbean, \"pid\"))\n    Attribute                       Type                            Access\n    pid                             java.lang.String                RO\n    Description: Process id for the server process.\n</code></pre> Source code in <code>wsadmin_type_hints/Help.py</code> <pre><code>def attributes(mbean_name: str, attribute_name: str = None) -&gt; str: # undocumented\n\"\"\"Use the `attributes` command to view a summary of all the attributes that the MBean defines by name. \n    - If you provide the `mbean_name` parameter, the command displays information about the attributes, operations, \n        constructors, description, notifications, and classname of the specified MBean. \n    - If you specify the `mbean_name` and `attribute_name`, the command displays information about the \n        specified attribute for the specified MBean.\n    Args:\n        mbean_name (str): The object name which identifies the desired MBean.\n        attribute_name (str): The attribute of interest. Defaults to None.\n    Returns:\n        str: Summary of all the attributes of the specified MBean\n    Example:\n        ```pycon\n        &gt;&gt;&gt; mbean = AdminControl.queryNames('type=Server,*').splitlines()[0]\n        &gt;&gt;&gt; print(Help.attributes(mbean))\n            Attribute                       Type                            Access\n            name                            java.lang.String                RO\n            shortName                       java.lang.String                RO\n            threadMonitorInterval           int                             RW\n            threadMonitorThreshold          int                             RW\n            threadMonitorAdjustmentThreshold  int                             RW\n            [...]\n        &gt;&gt;&gt; print(Help.attributes(mbean, \"pid\"))\n            Attribute                       Type                            Access\n            pid                             java.lang.String                RO\n            Description: Process id for the server process.\n        ```\n    \"\"\"\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/Help/#wsadmin_type_hints.Help.classname","title":"<code>Help.classname(mbean_name)</code>","text":"<p>Use the <code>classname</code> command to view a class name that the MBean defines by name.</p> <p>Parameters:</p> Name Type Description Default <code>mbean_name</code> <code>str</code> <p>The object name which identifies the desired MBean.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The class name represented by the MBean name.</p> Example <pre><code>&gt;&gt;&gt; mbean = AdminControl.queryNames('type=Server,*').splitlines()[0]\n&gt;&gt;&gt; print(Help.classname(mbean))\n    javax.management.modelmbean.RequiredModelMBean\n</code></pre> Source code in <code>wsadmin_type_hints/Help.py</code> <pre><code>def classname(mbean_name: str) -&gt; str: # undocumented\n\"\"\"Use the `classname` command to view a class name that the MBean defines by name.\n    Args:\n        mbean_name (str): The object name which identifies the desired MBean.\n    Returns:\n        str: The class name represented by the MBean name.\n    Example:\n        ```pycon\n        &gt;&gt;&gt; mbean = AdminControl.queryNames('type=Server,*').splitlines()[0]\n        &gt;&gt;&gt; print(Help.classname(mbean))\n            javax.management.modelmbean.RequiredModelMBean\n        ```\n    \"\"\"\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/Help/#wsadmin_type_hints.Help.constructors","title":"<code>Help.constructors(mbean_name)</code>","text":"<p>Use the <code>constructors</code> command to view a summary of all of the constructors that the MBean defines by name.</p> <p>Parameters:</p> Name Type Description Default <code>mbean_name</code> <code>str</code> <p>The object name which identifies the desired MBean.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The summary of all the constructors.</p> Example <pre><code>&gt;&gt;&gt; mbean = AdminControl.queryNames('type=Server,*').splitlines()[0]\n&gt;&gt;&gt; print(Help.constructors(mbean))\n    Constructors\n</code></pre> Source code in <code>wsadmin_type_hints/Help.py</code> <pre><code>def constructors(mbean_name: str) -&gt; str: # undocumented\n\"\"\"Use the `constructors` command to view a summary of all of the constructors that the MBean defines by name.\n    Args:\n        mbean_name (str): The object name which identifies the desired MBean.\n    Returns:\n        str: The summary of all the constructors.\n    Example:\n        ```pycon\n        &gt;&gt;&gt; mbean = AdminControl.queryNames('type=Server,*').splitlines()[0]\n        &gt;&gt;&gt; print(Help.constructors(mbean))\n            Constructors\n        ```\n    \"\"\"\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/Help/#wsadmin_type_hints.Help.description","title":"<code>Help.description(mbean_name)</code>","text":"<p>Use the <code>description</code> command to view a description that the MBean defines by name.</p> <p>Parameters:</p> Name Type Description Default <code>mbean_name</code> <code>str</code> <p>The object name which identifies the desired MBean.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The description of the requested MBean.</p> Example <pre><code>&gt;&gt;&gt; mbean = AdminControl.queryNames('type=Server,*').splitlines()[0]\n&gt;&gt;&gt; print(Help.description(mbean))\n    Managed object for overall server process.\n</code></pre> Source code in <code>wsadmin_type_hints/Help.py</code> <pre><code>def description(mbean_name: str) -&gt; str: # undocumented\n\"\"\"Use the `description` command to view a description that the MBean defines by name.\n    Args:\n        mbean_name (str): The object name which identifies the desired MBean.\n    Returns:\n        str: The description of the requested MBean.\n    Example:\n        ```pycon\n        &gt;&gt;&gt; mbean = AdminControl.queryNames('type=Server,*').splitlines()[0]\n        &gt;&gt;&gt; print(Help.description(mbean))\n            Managed object for overall server process.\n        ```\n    \"\"\"\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/Help/#wsadmin_type_hints.Help.help","title":"<code>Help.help()</code>","text":"<p>Use the <code>help</code> command to view a summary of all the available methods for the <code>Help</code> object.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Summary of all the available methods for the Help object.</p> Example <pre><code>&gt;&gt;&gt; print(Help.help())\n    WASX7028I: The Help object has two purposes:\n    [...]\n</code></pre> Source code in <code>wsadmin_type_hints/Help.py</code> <pre><code>def help() -&gt; str: # undocumented\n\"\"\"Use the `help` command to view a summary of all the available methods for the `Help` object.\n    Returns:\n        str: Summary of all the available methods for the Help object.\n    Example:\n        ```pycon\n        &gt;&gt;&gt; print(Help.help())\n            WASX7028I: The Help object has two purposes:\n            [...]\n        ```\n    \"\"\"\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/Help/#wsadmin_type_hints.Help.message","title":"<code>Help.message(message_id)</code>","text":"<p>Use the <code>message</code> command to view information for a message ID.</p> <p>Parameters:</p> Name Type Description Default <code>message_id</code> <code>str</code> <p>The desired message ID.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A description for the provided message ID.</p> Example <pre><code>&gt;&gt;&gt; print(Help.message('CNTR0005W'))\n    Explanation: The container was unable to passivate an enterprise bean due to exception {2} \n    User action: Take action based upon message in exception {2}\n</code></pre> Source code in <code>wsadmin_type_hints/Help.py</code> <pre><code>def message(message_id: str) -&gt; str: # undocumented\n\"\"\"Use the `message` command to view information for a message ID.\n    Args:\n        message_id (str): The desired message ID.\n    Returns:\n        str: A description for the provided message ID.\n    Example:\n        ```pycon\n        &gt;&gt;&gt; print(Help.message('CNTR0005W'))\n            Explanation: The container was unable to passivate an enterprise bean due to exception {2} \n            User action: Take action based upon message in exception {2}\n        ```\n    \"\"\"\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/Help/#wsadmin_type_hints.Help.notifications","title":"<code>Help.notifications(mbean_name)</code>","text":"<p>Use the <code>notifications</code> command to view a summary of all the notifications that the MBean defines by name.</p> <p>Parameters:</p> Name Type Description Default <code>mbean_name</code> <code>str</code> <p>The object name which identifies the desired MBean.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>All the notifications that the MBean defines by name.</p> Example <pre><code>&gt;&gt;&gt; mbean = AdminControl.queryNames('type=Server,*').splitlines()[0]\n&gt;&gt;&gt; print(Help.notifications(mbean))\n    Notifications\n    j2ee.state.starting\n    j2ee.state.running\n    j2ee.state.stopping\n    j2ee.state.stopped\n    j2ee.state.failed\n    j2ee.attribute.changed\n    jmx.attribute.changed\n</code></pre> Source code in <code>wsadmin_type_hints/Help.py</code> <pre><code>def notifications(mbean_name: str) -&gt; str: # undocumented\n\"\"\"Use the `notifications` command to view a summary of all the notifications that the MBean defines by name.\n    Args:\n        mbean_name (str): The object name which identifies the desired MBean.\n    Returns:\n        str: All the notifications that the MBean defines by name.\n    Example:\n        ```pycon\n        &gt;&gt;&gt; mbean = AdminControl.queryNames('type=Server,*').splitlines()[0]\n        &gt;&gt;&gt; print(Help.notifications(mbean))\n            Notifications\n            j2ee.state.starting\n            j2ee.state.running\n            j2ee.state.stopping\n            j2ee.state.stopped\n            j2ee.state.failed\n            j2ee.attribute.changed\n            jmx.attribute.changed\n        ```\n    \"\"\"\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/Help/#wsadmin_type_hints.Help.operations","title":"<code>Help.operations(mbean_name, operation_name=None)</code>","text":"<p>Use the operations command with the MBean name parameter to view a summary of all the operations that the      MBean defines by name. </p> <ul> <li>Specify a value for the <code>mbean_name</code> and <code>operation_name</code> to display the signature of the operation     for the MBean that is defined by name.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>mbean_name</code> <code>str</code> <p>The object name which identifies the desired MBean.</p> required <code>operation_name</code> <code>str</code> <p>The operation of interest. Defaults to None.</p> <code>None</code> Source code in <code>wsadmin_type_hints/Help.py</code> <pre><code>def operations(mbean_name: str, operation_name: str = None): # undocumented\n\"\"\"Use the operations command with the MBean name parameter to view a summary of all the operations that the \n        MBean defines by name. \n    - Specify a value for the `mbean_name` and `operation_name` to display the signature of the operation\n        for the MBean that is defined by name.\n    Args:\n        mbean_name (str): The object name which identifies the desired MBean.\n        operation_name (str, optional): The operation of interest. Defaults to None.\n    \"\"\"\npass\n</code></pre>"},{"location":"reference/wsadmin_type_hints/wsadmin_types/","title":"wsadmin_types","text":"<p>Module used internally by <code>wsadmin-type-hints</code> to define appropriate return types for some <code>wsadmin</code> methods.</p>"}]}