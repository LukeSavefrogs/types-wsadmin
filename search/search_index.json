{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This project aims to provide a better developer experience while developing <code>wsadmin</code> scripts for IBM\u00ae Websphere Application Server.</p> <p>It does so by providing:</p> <ul> <li>Autocompletion through the intellisense.</li> <li>Type hints (function parameters and function return types)</li> </ul> <p>This leads to lots of advantages to the developer, such as:</p> <ul> <li>Faster development, since you don't need to leave the editor to know what was the name of some method.</li> <li>Less errors, since you don't need to manually re-type the method names and an error will show up if you mistype the methods.</li> </ul> <p>Warning</p> <p>The <code>wsadmin</code> scripting tool only supports Jython up to 2.7 (some still have Jython 2.1!), so the following requirements must still be satisfied:</p> <ul> <li>you MUST use Python 2 syntax (check the Jython version to know which one you'll need to target)</li> <li>some packages available on development environments might not be available or might have some differences.</li> </ul> <p>Make sure to check that your script matches your workplace/environment requirements before submitting it. This package DOES NOT in any way prevent you from writing bugged code, or could even contain old modules not used anymore in the official documentation (since it was originally written for my workplace production environment using Websphere Application Server 8.5.5/9.0 and Jython 2.1).</p> <p>Always check that your environment requirements/versions are the same as this library. </p>"},{"location":"#gallery","title":"Gallery","text":"<p>Here's some screenshots showing the features of this package. The IDE I'm using here is Visual Studio Code.</p> <p> </p> Autocompletion for the <code>AdminControl</code> command. <p> </p> Type hint for function parameters as well as return types. <p> </p> An error will show up if you mistype the method. <p> </p> Autocompletion based on the <code>AdminConfig.attributes(...)</code> return type (<code>str</code>)."},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This is an unofficial package created for speeding up the development process and is not in any way affiliated with IBM\u00ae. All trademarks and registered trademarks are the property of their respective company owners.</p> <p>The code does not include any implementation detail, and includes only the informations (such as parameter numbers, types and descriptions) publicly available on the official Websphere Application Server\u00ae documentation.</p>"},{"location":"getting-started/","title":"Getting started","text":"<p>This section will guide you through the installation and setup of the development environment.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>The first step is to install the <code>wsadmin-type-hints</code> package.</p> <ul> <li> <p>Using <code>pip</code> (global install): <pre><code>pip install wsadmin-type-hints\n</code></pre></p> </li> <li> <p>Using <code>poetry</code>: <pre><code>poetry add wsadmin-type-hints --group dev \n</code></pre></p> </li> <li> <p>Using <code>pipenv</code>: <pre><code>pipenv install --dev wsadmin-type-hints\n</code></pre></p> </li> <li> <p>For other dependency managers (such as pdm or hatch) see the respective documentation...</p> </li> </ul> <p>Note</p> <p>If installed inside a virtual environment, you may need to activate it first, to be able to use it.</p>"},{"location":"getting-started/#usage","title":"Usage","text":"<p>The <code>wsadmin-type-hints</code> package is intended to be used to provide type hints to the Python interpreter used by IDE language servers (such as Pylance).  Because of this, the functions do not contain actual code and their body is always empty.</p> <p>The following steps will allow you to make use of modern IDE intellisense for <code>wsadmin</code> objects:</p> <ol> <li> <p>To differentiate between the development and production environment we can use a <code>try..except</code> block: <pre><code>try:\n(AdminControl, AdminConfig, AdminApp, AdminTask, Help)\nexcept NameError:\n# wsadmin objects are not defined, so this is the development environment.\nfrom wsadmin_type_hints import *\nelse:\nprint(\"Production environment, i'm not needed here \ud83d\ude03\")\n</code></pre>     This block could even be left as-is in the code deployed on the production server (maybe leaving out the emoji before uploading \ud83d\ude07), since it won't ever reach the import (and even then the script would simply fail because of the <code>wsadmin-type-hints</code> package not being there).</p> </li> <li> <p>Use the <code>wsadmin</code> objects like always:  <pre><code>current_cell = AdminControl.getCell()\nprint(\"Current cell: %s\" % current_cell)\n</code></pre></p> </li> </ol>"}]}